package gtugio.controller

import gtugio.configuration.auth.Role 
import gtugio.core.auth.Secure 
import gtugio.domain.Comment 
import gtugio.domain.Project 

/* This class was auto-generated by Grails. */

@Secure(value=[Role.ADMIN], exclude=["detail", "post_comment"])
class ProjectController {
	
	static allowedMethods = [save: "POST", update: "POST", delete: "POST"]
	
	static navigation = [
		[
			group: "admin",
			order: 5,
			title: "Other projects",
			action: "list",
			isVisible: { session.user?.role == Role.ADMIN }
		]
	]
	
	def index = {
		redirect(action: "list", params: params)
	}
	
	def list = {
		params.max = Math.min(params.max ? params.int('max') : 10, 100)
		[projectInstanceList: Project.list(params), projectInstanceTotal: Project.count()]
	}
	
	def create = {
		def projectInstance = new Project()
		projectInstance.properties = params
		return [projectInstance: projectInstance]
	}
	
	def save = {
		def projectInstance = new Project(params)
		if (projectInstance.save(flush: true)) {
			flash.message = "${message(code: 'default.created.message', args: [message(code: 'project.label', default: 'Project'), projectInstance.id])}"
			redirect(action: "show", id: projectInstance.id)
		}
		else {
			render(view: "create", model: [projectInstance: projectInstance])
		}
	}
	
	def show = {
		def projectInstance = Project.get(params.id)
		if (!projectInstance) {
			flash.message = "${message(code: 'default.not.found.message', args: [message(code: 'project.label', default: 'Project'), params.id])}"
			redirect(action: "list")
		}
		else {
			[projectInstance: projectInstance]
		}
	}
	
	def edit = {
		def projectInstance = Project.get(params.id)
		if (!projectInstance) {
			flash.message = "${message(code: 'default.not.found.message', args: [message(code: 'project.label', default: 'Project'), params.id])}"
			redirect(action: "list")
		}
		else {
			return [projectInstance: projectInstance]
		}
	}
	
	def update = {
		def projectInstance = Project.get(params.id)
		if (projectInstance) {
			if (params.version) {
				def version = params.version.toLong()
				if (projectInstance.version > version) {
					
					projectInstance.errors.rejectValue("version", "default.optimistic.locking.failure", [message(code: 'project.label', default: 'Project')] as Object[], "Another user has updated this Project while you were editing")
					render(view: "edit", model: [projectInstance: projectInstance])
					return
				}
			}
			projectInstance.properties = params
			if (!projectInstance.hasErrors() && projectInstance.save(flush: true)) {
				flash.message = "${message(code: 'default.updated.message', args: [message(code: 'project.label', default: 'Project'), projectInstance.id])}"
				redirect(action: "show", id: projectInstance.id)
			}
			else {
				render(view: "edit", model: [projectInstance: projectInstance])
			}
		}
		else {
			flash.message = "${message(code: 'default.not.found.message', args: [message(code: 'project.label', default: 'Project'), params.id])}"
			redirect(action: "list")
		}
	}
	
	def delete = {
		def projectInstance = Project.get(params.id)
		if (projectInstance) {
			try {
				projectInstance.delete(flush: true)
				flash.message = "${message(code: 'default.deleted.message', args: [message(code: 'project.label', default: 'Project'), params.id])}"
				redirect(action: "list")
			}
			catch (org.springframework.dao.DataIntegrityViolationException e) {
				flash.message = "${message(code: 'default.not.deleted.message', args: [message(code: 'project.label', default: 'Project'), params.id])}"
				redirect(action: "show", id: params.id)
			}
		}
		else {
			flash.message = "${message(code: 'default.not.found.message', args: [message(code: 'project.label', default: 'Project'), params.id])}"
			redirect(action: "list")
		}
	}
	
	def detail = {
		def project
		def comments
		
		try {
			def projectid = params.id as int
			project = Project.findByIdAndStatus(projectid, "published")
			
			comments = Comment.withCriteria {
				eq("project", project)
				order("posted", "desc")
			}
		} catch (NumberFormatException e) {
		}
		
		[ project : project, comments : comments ]
	}
	
	def post_comment = {
		withForm {
			params.project_id = params.project_id as int
			
			def comment = new Comment()
			params.user = session.user
			params.project = Project.get(params.project_id)
			
			comment.properties = params
			
			if (!comment.hasErrors() && comment.save(flush:true)) {
				flash.message = "Comment has been published."
			} else {
				flash.message = "Error while publishing comment."
			}

			redirect(controller: "project", action: "detail", id: params.project_id)
		}
	}
}
